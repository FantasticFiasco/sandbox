Parameters:

  EmailAddress:
    Type: String
    Description: The e-mail address to send CodePipeline notifications to

  SourceObjectKey:
    Type: String
    Default: dummy.txt

Resources:

  # Pipeline

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: !Ref SourceObjectKey
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"

  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  ArtifactBucket:
    Type: AWS::S3::Bucket

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - codepipeline.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - iam:PassRole
                  - s3:*
                Resource: "*"

  # Pipeline started notification

  StartedTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Topic for pipeline started events
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress
        - Protocol: lambda
          Endpoint: !GetAtt NotificationLambda.Arn

  StartedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref StartedTopic
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
            Resource: "*"

  StartedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - STARTED
      Targets:
        - Id: StartedTopic
          Arn: !Ref StartedTopic

  # Pipeline succeeded notification

  SucceededTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Topic for pipeline succeeded events
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress

  SucceededTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SucceededTopic
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
            Resource: "*"

  SucceededRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - SUCCEEDED
      Targets:
        - Id: SucceededTopic
          Arn: !Ref SucceededTopic

  # Pipeline failed notification

  FailedTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Topic for pipeline failed events
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress

  FailedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref FailedTopic
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sns:Publish
            Resource: "*"

  FailedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - FAILED
      Targets:
        - Id: FailedTopic
          Arn: !Ref FailedTopic

  # Notification lambda

  NotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt NotificationLambdaExecutionRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: |
          def handler(event, context):

            time = event['time']
            account = event['account']
            pipeline = event['detail']['pipeline']

            print('{} Account: {}; pipeline: {}'.format(time, account, pipeline))

  NotificationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
